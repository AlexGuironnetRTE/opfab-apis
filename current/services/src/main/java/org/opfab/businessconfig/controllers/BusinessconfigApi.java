/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.20).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.opfab.businessconfig.controllers;

import org.opfab.businessconfig.model.Monitoring;
import org.opfab.businessconfig.model.Process;
import org.opfab.businessconfig.model.ProcessGroups;
import org.springframework.core.io.Resource;
import org.opfab.businessconfig.model.Response;
import com.fasterxml.jackson.databind.ObjectMapper;
//import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
//import org.springframework.security.access.prepost.PreAuthorize;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Optional;

/**
 * the businessconfig API
 *
 * @author SWAGGER
 **/

//@Api(value = "businessconfig", description = "the businessconfig API")
@RequestMapping("/businessconfig")
public interface BusinessconfigApi {

    /**
     * <p>Delete all existing process configuration data</p>
     * <p>Delete all existing process configuration data</p>
     * @return !AUTOGENERATED!
     * @throws Exception !AUTOGENERATED!
     **/
 /*   @ApiOperation(value = "Delete all existing process configuration data", nickname = "clearProcesses", notes = "Delete all existing process configuration data", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "OK"),
        @ApiResponse(code = 401, message = "Authentication required"),
        @ApiResponse(code = 500, message = "Unable to delete processes") })
    */
    ///processes
    @RequestMapping(value = "/processes",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    //
    default Void _clearProcesses(HttpServletRequest request, HttpServletResponse response)  throws Exception {
        return clearProcesses(request, response );
    }

    // Override this method
    /**
    * <p>Delete all existing process configuration data</p>
    * <p>Delete all existing process configuration data</p>
        * @return !AUTOGENERATED!
    * @throws Exception !AUTOGENERATED!
    **/
    Void clearProcesses(HttpServletRequest request, HttpServletResponse response) throws Exception;


    /**
     * <p>Delete existing process configuration data</p>
     * <p>Delete existing process configuration data</p>
     * @param processId Id of the process to delete
     * @return !AUTOGENERATED!
     * @throws Exception !AUTOGENERATED!
     **/
 /*   @ApiOperation(value = "Delete existing process configuration data", nickname = "deleteBundle", notes = "Delete existing process configuration data", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "OK"),
        @ApiResponse(code = 401, message = "Authentication required"),
        @ApiResponse(code = 404, message = "Not found"),
        @ApiResponse(code = 500, message = "Unable to delete process") })
    */
    ///processes/{processId}
    @RequestMapping(value = "/processes/{processId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    //
    default Void _deleteBundle(HttpServletRequest request, HttpServletResponse response,/*@ApiParam(value = "Id of the process to delete",required=true)*/ @PathVariable("processId") String processId)  throws Exception {
        return deleteBundle(request, response ,processId);
    }

    // Override this method
    /**
    * <p>Delete existing process configuration data</p>
    * <p>Delete existing process configuration data</p>
    * @param processId Id of the process to delete
    * @return !AUTOGENERATED!
    * @throws Exception !AUTOGENERATED!
    **/
    Void deleteBundle(HttpServletRequest request, HttpServletResponse response,String processId) throws Exception;


    /**
     * <p>Delete specific version of the configuration data for a given process</p>
     * <p>Delete specific version of the configuration data for a given process</p>
     * @param processId Id of the process to delete
     * @param version Version of process to delete
     * @return !AUTOGENERATED!
     * @throws Exception !AUTOGENERATED!
     **/
 /*   @ApiOperation(value = "Delete specific version of the configuration data for a given process", nickname = "deleteBundleVersion", notes = "Delete specific version of the configuration data for a given process", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "OK"),
        @ApiResponse(code = 401, message = "Authentication required"),
        @ApiResponse(code = 404, message = "Not found"),
        @ApiResponse(code = 500, message = "Unable to delete version of process") })
    */
    ///processes/{processId}/versions/{version}
    @RequestMapping(value = "/processes/{processId}/versions/{version}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    //
    default Void _deleteBundleVersion(HttpServletRequest request, HttpServletResponse response,/*@ApiParam(value = "Id of the process to delete",required=true)*/ @PathVariable("processId") String processId,/*@ApiParam(value = "Version of process to delete",required=true)*/ @PathVariable("version") String version)  throws Exception {
        return deleteBundleVersion(request, response ,processId,version);
    }

    // Override this method
    /**
    * <p>Delete specific version of the configuration data for a given process</p>
    * <p>Delete specific version of the configuration data for a given process</p>
    * @param processId Id of the process to delete
* @param version Version of process to delete
    * @return !AUTOGENERATED!
    * @throws Exception !AUTOGENERATED!
    **/
    Void deleteBundleVersion(HttpServletRequest request, HttpServletResponse response,String processId,String version) throws Exception;


    /**
     * <p>Get css file</p>
     * <p>Get css file, if file exists return file (text/css) otherwise return error message (application/json)</p>
     * @param processId Id of the process to retrieve
     * @param cssFileName Name of stylesheet file to retrieve (w.o. extension)
     * @param version Expected version of stylesheet (defaults to latest)
     * @return !AUTOGENERATED!
     * @throws Exception !AUTOGENERATED!
     **/
 /*   @ApiOperation(value = "Get css file", nickname = "getCss", notes = "Get css file, if file exists return file (text/css) otherwise return error message (application/json)", response = byte[].class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = byte[].class),
        @ApiResponse(code = 404, message = "No such template") })
    */
    ///processes/{processId}/css/{cssFileName}
    @RequestMapping(value = "/processes/{processId}/css/{cssFileName}",
        produces = { "application/json", "text/css" }, 
        method = RequestMethod.GET)
    //
    default byte[] _getCss(HttpServletRequest request, HttpServletResponse response,/*@ApiParam(value = "Id of the process to retrieve",required=true)*/ @PathVariable("processId") String processId,/*@ApiParam(value = "Name of stylesheet file to retrieve (w.o. extension)",required=true)*/ @PathVariable("cssFileName") String cssFileName,/*@ApiParam(value = "Expected version of stylesheet (defaults to latest)")*/ @Valid @RequestParam(value = "version", required = false) String version)  throws Exception {
        return getCss(request, response ,processId,cssFileName,version);
    }

    // Override this method
    /**
    * <p>Get css file</p>
    * <p>Get css file, if file exists return file (text/css) otherwise return error message (application/json)</p>
    * @param processId Id of the process to retrieve
* @param cssFileName Name of stylesheet file to retrieve (w.o. extension)
* @param version Expected version of stylesheet (defaults to latest)
    * @return !AUTOGENERATED!
    * @throws Exception !AUTOGENERATED!
    **/
    byte[] getCss(HttpServletRequest request, HttpServletResponse response,String processId,String cssFileName,String version) throws Exception;


    /**
     * <p>Get i18n file</p>
     * <p>Get i18n file, if file exists return file (text/plain) otherwise return error message (application/json)</p>
     * @param processId Id of the process to retrieve
     * @param locale Locale iso code
     * @param version Expected version of i18n (defaults to latest)
     * @return !AUTOGENERATED!
     * @throws Exception !AUTOGENERATED!
     **/
 /*   @ApiOperation(value = "Get i18n file", nickname = "getI18n", notes = "Get i18n file, if file exists return file (text/plain) otherwise return error message (application/json)", response = byte[].class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = byte[].class),
        @ApiResponse(code = 401, message = "Authentication required"),
        @ApiResponse(code = 404, message = "No such template") })
    */
    ///processes/{processId}/i18n
    @RequestMapping(value = "/processes/{processId}/i18n",
        produces = { "application/json", "text/plain" }, 
        method = RequestMethod.GET)
    //
    default byte[] _getI18n(HttpServletRequest request, HttpServletResponse response,/*@ApiParam(value = "Id of the process to retrieve",required=true)*/ @PathVariable("processId") String processId,@NotNull /*@ApiParam(value = "Locale iso code", required = true)*/ @Valid @RequestParam(value = "locale", required = true) String locale,/*@ApiParam(value = "Expected version of i18n (defaults to latest)")*/ @Valid @RequestParam(value = "version", required = false) String version)  throws Exception {
        return getI18n(request, response ,processId,locale,version);
    }

    // Override this method
    /**
    * <p>Get i18n file</p>
    * <p>Get i18n file, if file exists return file (text/plain) otherwise return error message (application/json)</p>
    * @param processId Id of the process to retrieve
* @param locale Locale iso code
* @param version Expected version of i18n (defaults to latest)
    * @return !AUTOGENERATED!
    * @throws Exception !AUTOGENERATED!
    **/
    byte[] getI18n(HttpServletRequest request, HttpServletResponse response,String processId,String locale,String version) throws Exception;


    /**
     * <p>Get the monitoring configuration</p>
     * <p>Get the monitoring configuration </p>
     * @return !AUTOGENERATED!
     * @throws Exception !AUTOGENERATED!
     **/
 /*   @ApiOperation(value = "Get the monitoring configuration", nickname = "getMonitoring", notes = "Get the monitoring configuration ", response = Monitoring.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Monitoring.class),
        @ApiResponse(code = 401, message = "Authentication required") })
    */
    ///monitoring
    @RequestMapping(value = "/monitoring",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    //
    default Monitoring _getMonitoring(HttpServletRequest request, HttpServletResponse response)  throws Exception {
        return getMonitoring(request, response );
    }

    // Override this method
    /**
    * <p>Get the monitoring configuration</p>
    * <p>Get the monitoring configuration </p>
        * @return !AUTOGENERATED!
    * @throws Exception !AUTOGENERATED!
    **/
    Monitoring getMonitoring(HttpServletRequest request, HttpServletResponse response) throws Exception;


    /**
     * <p>Access configuration data for a given process</p>
     * <p>Access configuration data for a given process</p>
     * @param processId Id of the process to retrieve
     * @param version Expected version of process (defaults to latest)
     * @return !AUTOGENERATED!
     * @throws Exception !AUTOGENERATED!
     **/
 /*   @ApiOperation(value = "Access configuration data for a given process", nickname = "getProcess", notes = "Access configuration data for a given process", response = Process.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Process.class),
        @ApiResponse(code = 401, message = "Authentication required") })
    */
    ///processes/{processId}
    @RequestMapping(value = "/processes/{processId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    //
    default Process _getProcess(HttpServletRequest request, HttpServletResponse response,/*@ApiParam(value = "Id of the process to retrieve",required=true)*/ @PathVariable("processId") String processId,/*@ApiParam(value = "Expected version of process (defaults to latest)")*/ @Valid @RequestParam(value = "version", required = false) String version)  throws Exception {
        return getProcess(request, response ,processId,version);
    }

    // Override this method
    /**
    * <p>Access configuration data for a given process</p>
    * <p>Access configuration data for a given process</p>
    * @param processId Id of the process to retrieve
* @param version Expected version of process (defaults to latest)
    * @return !AUTOGENERATED!
    * @throws Exception !AUTOGENERATED!
    **/
    Process getProcess(HttpServletRequest request, HttpServletResponse response,String processId,String version) throws Exception;


    /**
     * <p>List existing processes</p>
     * <p>List existing processes</p>
     * @return !AUTOGENERATED!
     * @throws Exception !AUTOGENERATED!
     **/
 /*   @ApiOperation(value = "List existing processes", nickname = "getProcesses", notes = "List existing processes", response = Process.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Process.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Authentication required") })
    */
    ///processes
    @RequestMapping(value = "/processes",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    //
    default List<Process> _getProcesses(HttpServletRequest request, HttpServletResponse response)  throws Exception {
        return getProcesses(request, response );
    }

    // Override this method
    /**
    * <p>List existing processes</p>
    * <p>List existing processes</p>
        * @return !AUTOGENERATED!
    * @throws Exception !AUTOGENERATED!
    **/
    List<Process> getProcesses(HttpServletRequest request, HttpServletResponse response) throws Exception;


    /**
     * <p>Get the groups of processes</p>
     * <p>Get the groups of processes</p>
     * @return !AUTOGENERATED!
     * @throws Exception !AUTOGENERATED!
     **/
 /*   @ApiOperation(value = "Get the groups of processes", nickname = "getProcessgroups", notes = "Get the groups of processes", response = ProcessGroups.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ProcessGroups.class),
        @ApiResponse(code = 401, message = "Authentication required") })
    */
    ///processgroups
    @RequestMapping(value = "/processgroups",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    //
    default ProcessGroups _getProcessgroups(HttpServletRequest request, HttpServletResponse response)  throws Exception {
        return getProcessgroups(request, response );
    }

    // Override this method
    /**
    * <p>Get the groups of processes</p>
    * <p>Get the groups of processes</p>
        * @return !AUTOGENERATED!
    * @throws Exception !AUTOGENERATED!
    **/
    ProcessGroups getProcessgroups(HttpServletRequest request, HttpServletResponse response) throws Exception;


    /**
     * <p>Get response associated with a given state of a given process</p>
     * <p>Get response associated with a given state of a given process, returns a response (application/json)</p>
     * @param processId Id of the process to retrieve
     * @param state Name of state
     * @param version Required version of process (defaults to latest)
     * @return !AUTOGENERATED!
     * @throws Exception !AUTOGENERATED!
     **/
 /*   @ApiOperation(value = "Get response associated with a given state of a given process", nickname = "getResponse", notes = "Get response associated with a given state of a given process, returns a response (application/json)", response = Response.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Response.class),
        @ApiResponse(code = 401, message = "Authentication required"),
        @ApiResponse(code = 404, message = "No such process/state") })
    */
    ///processes/{processId}/{state}/response
    @RequestMapping(value = "/processes/{processId}/{state}/response",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    //
    default Response _getResponse(HttpServletRequest request, HttpServletResponse response,/*@ApiParam(value = "Id of the process to retrieve",required=true)*/ @PathVariable("processId") String processId,/*@ApiParam(value = "Name of state",required=true)*/ @PathVariable("state") String state,/*@ApiParam(value = "Required version of process (defaults to latest)")*/ @Valid @RequestParam(value = "version", required = false) String version)  throws Exception {
        return getResponse(request, response ,processId,state,version);
    }

    // Override this method
    /**
    * <p>Get response associated with a given state of a given process</p>
    * <p>Get response associated with a given state of a given process, returns a response (application/json)</p>
    * @param processId Id of the process to retrieve
* @param state Name of state
* @param version Required version of process (defaults to latest)
    * @return !AUTOGENERATED!
    * @throws Exception !AUTOGENERATED!
    **/
    Response getResponse(HttpServletRequest request, HttpServletResponse response,String processId,String state,String version) throws Exception;


    /**
     * <p>Get existing template</p>
     * <p>Get template, if file exists return file (application/handlebars) otherwise return error message (application/json)</p>
     * @param processId Id of the process to retrieve
     * @param templateName Name of template to retrieve (w.o. extension)
     * @param locale Locale iso code
     * @param version Expected version of template (defaults to latest)
     * @return !AUTOGENERATED!
     * @throws Exception !AUTOGENERATED!
     **/
 /*   @ApiOperation(value = "Get existing template", nickname = "getTemplate", notes = "Get template, if file exists return file (application/handlebars) otherwise return error message (application/json)", response = byte[].class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = byte[].class),
        @ApiResponse(code = 401, message = "Authentication required"),
        @ApiResponse(code = 404, message = "No such template") })
    */
    ///processes/{processId}/templates/{templateName}
    @RequestMapping(value = "/processes/{processId}/templates/{templateName}",
        produces = { "application/json", "application/handlebars" }, 
        method = RequestMethod.GET)
    //
    default byte[] _getTemplate(HttpServletRequest request, HttpServletResponse response,/*@ApiParam(value = "Id of the process to retrieve",required=true)*/ @PathVariable("processId") String processId,/*@ApiParam(value = "Name of template to retrieve (w.o. extension)",required=true)*/ @PathVariable("templateName") String templateName,/*@ApiParam(value = "Locale iso code")*/ @Valid @RequestParam(value = "locale", required = false) String locale,/*@ApiParam(value = "Expected version of template (defaults to latest)")*/ @Valid @RequestParam(value = "version", required = false) String version)  throws Exception {
        return getTemplate(request, response ,processId,templateName,locale,version);
    }

    // Override this method
    /**
    * <p>Get existing template</p>
    * <p>Get template, if file exists return file (application/handlebars) otherwise return error message (application/json)</p>
    * @param processId Id of the process to retrieve
* @param templateName Name of template to retrieve (w.o. extension)
* @param locale Locale iso code
* @param version Expected version of template (defaults to latest)
    * @return !AUTOGENERATED!
    * @throws Exception !AUTOGENERATED!
    **/
    byte[] getTemplate(HttpServletRequest request, HttpServletResponse response,String processId,String templateName,String locale,String version) throws Exception;


    /**
     * <p>Post the json defining the monitoring config</p>
     * <p>Post the json defining the monitoring config This json is saved to disk, under the name 'monitoring.json'.</p>
     * @param monitoring 
     * @return !AUTOGENERATED!
     * @throws Exception !AUTOGENERATED!
     **/
 /*   @ApiOperation(value = "Post the json defining the monitoring config", nickname = "postMonitoring", notes = "Post the json defining the monitoring config This json is saved to disk, under the name 'monitoring.json'.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Successful creation"),
        @ApiResponse(code = 401, message = "Authentication required"),
        @ApiResponse(code = 403, message = "Forbidden - ADMIN role necessary") })
    */
    ///monitoring
    @RequestMapping(value = "/monitoring",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    //
    default Void _postMonitoring(HttpServletRequest request, HttpServletResponse response,/*@ApiParam(value = ""  )*/  @Valid @RequestBody Monitoring monitoring)  throws Exception {
        return postMonitoring(request, response ,monitoring);
    }

    // Override this method
    /**
    * <p>Post the json defining the monitoring config</p>
    * <p>Post the json defining the monitoring config This json is saved to disk, under the name 'monitoring.json'.</p>
    * @param monitoring 
    * @return !AUTOGENERATED!
    * @throws Exception !AUTOGENERATED!
    **/
    Void postMonitoring(HttpServletRequest request, HttpServletResponse response,Monitoring monitoring) throws Exception;


    /**
     * <p>Upload process configuration bundle</p>
     * <p>Upload process configuration bundle. Bundle is a gzipped tarball (tar.gz) containing a config.json file (containing a Process object in json notation) and the associated resource files</p>
     * @param file file to upload
     * @return !AUTOGENERATED!
     * @throws Exception !AUTOGENERATED!
     **/
 /*   @ApiOperation(value = "Upload process configuration bundle", nickname = "uploadBundle", notes = "Upload process configuration bundle. Bundle is a gzipped tarball (tar.gz) containing a config.json file (containing a Process object in json notation) and the associated resource files", response = Process.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Successful creation", response = Process.class),
        @ApiResponse(code = 401, message = "Authentication required"),
        @ApiResponse(code = 403, message = "Forbidden - ADMIN role necessary") })
    */
    ///processes
    @RequestMapping(value = "/processes",
        produces = { "application/json" }, 
        consumes = { "multipart/form-data" },
        method = RequestMethod.POST)
    //
    default Process _uploadBundle(HttpServletRequest request, HttpServletResponse response,/*@ApiParam(value = "file detail")*/ @Valid @RequestPart("file") MultipartFile file)  throws Exception {
        return uploadBundle(request, response ,file);
    }

    // Override this method
    /**
    * <p>Upload process configuration bundle</p>
    * <p>Upload process configuration bundle. Bundle is a gzipped tarball (tar.gz) containing a config.json file (containing a Process object in json notation) and the associated resource files</p>
    * @param file file to upload
    * @return !AUTOGENERATED!
    * @throws Exception !AUTOGENERATED!
    **/
    Process uploadBundle(HttpServletRequest request, HttpServletResponse response,MultipartFile file) throws Exception;


    /**
     * <p>Upload file defining the groups of processes</p>
     * <p>Upload file defining the groups of processes. This file must be in json format and is saved to disk, under the name 'processGroups.json'.</p>
     * @param file file to upload
     * @return !AUTOGENERATED!
     * @throws Exception !AUTOGENERATED!
     **/
 /*   @ApiOperation(value = "Upload file defining the groups of processes", nickname = "uploadProcessgroups", notes = "Upload file defining the groups of processes. This file must be in json format and is saved to disk, under the name 'processGroups.json'.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Successful creation"),
        @ApiResponse(code = 401, message = "Authentication required"),
        @ApiResponse(code = 403, message = "Forbidden - ADMIN role necessary") })
    */
    ///processgroups
    @RequestMapping(value = "/processgroups",
        produces = { "application/json" }, 
        consumes = { "multipart/form-data" },
        method = RequestMethod.POST)
    //
    default Void _uploadProcessgroups(HttpServletRequest request, HttpServletResponse response,/*@ApiParam(value = "file detail")*/ @Valid @RequestPart("file") MultipartFile file)  throws Exception {
        return uploadProcessgroups(request, response ,file);
    }

    // Override this method
    /**
    * <p>Upload file defining the groups of processes</p>
    * <p>Upload file defining the groups of processes. This file must be in json format and is saved to disk, under the name 'processGroups.json'.</p>
    * @param file file to upload
    * @return !AUTOGENERATED!
    * @throws Exception !AUTOGENERATED!
    **/
    Void uploadProcessgroups(HttpServletRequest request, HttpServletResponse response,MultipartFile file) throws Exception;

}
