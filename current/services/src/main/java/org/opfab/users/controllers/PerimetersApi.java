/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.20).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.opfab.users.controllers;

import java.util.List;
import org.opfab.users.model.Perimeter;
import com.fasterxml.jackson.databind.ObjectMapper;
//import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
//import org.springframework.security.access.prepost.PreAuthorize;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Optional;

/**
 * the perimeters API
 *
 * @author SWAGGER
 **/

//@Api(value = "perimeters", description = "the perimeters API")
@RequestMapping("/perimeters")
public interface PerimetersApi {

    /**
     * <p>Add groups to perimeter</p>
     * <p>ONLY add groups to perimeter (no deletion).</p>
     * @param id Perimeter id
     * @param groups Array of group id to be added to perimeter
     * @return !AUTOGENERATED!
     * @throws Exception !AUTOGENERATED!
     **/
 /*   @ApiOperation(value = "Add groups to perimeter", nickname = "addPerimeterGroups", notes = "ONLY add groups to perimeter (no deletion).", tags={ "perimeters","groups", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Updated"),
        @ApiResponse(code = 400, message = "Bad request"),
        @ApiResponse(code = 401, message = "Authentication required"),
        @ApiResponse(code = 403, message = "Forbidden - ADMIN role necessary"),
        @ApiResponse(code = 404, message = "Required perimeter not found") })
    */
    ///{id}/groups
    @RequestMapping(value = "/{id}/groups",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PATCH)
    //
    default Void _addPerimeterGroups(HttpServletRequest request, HttpServletResponse response,/*@ApiParam(value = "Perimeter id",required=true)*/ @PathVariable("id") String id,/*@ApiParam(value = "Array of group id to be added to perimeter"  )*/  @Valid @RequestBody List<String> groups)  throws Exception {
        return addPerimeterGroups(request, response ,id,groups);
    }

    // Override this method
    /**
    * <p>Add groups to perimeter</p>
    * <p>ONLY add groups to perimeter (no deletion).</p>
    * @param id Perimeter id
* @param groups Array of group id to be added to perimeter
    * @return !AUTOGENERATED!
    * @throws Exception !AUTOGENERATED!
    **/
    Void addPerimeterGroups(HttpServletRequest request, HttpServletResponse response,String id,List<String> groups) throws Exception;


    /**
     * <p>Create a new perimeter</p>
     * <p>Create a new perimeter.</p>
     * @param perimeter Perimeter to be created
     * @return !AUTOGENERATED!
     * @throws Exception !AUTOGENERATED!
     **/
 /*   @ApiOperation(value = "Create a new perimeter", nickname = "createPerimeter", notes = "Create a new perimeter.", response = Perimeter.class, tags={ "perimeters", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created", response = Perimeter.class),
        @ApiResponse(code = 400, message = "Bad request (duplicate key)"),
        @ApiResponse(code = 401, message = "Authentication required"),
        @ApiResponse(code = 403, message = "Forbidden - ADMIN role necessary") })
    */
    //
    @RequestMapping(
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    //
    default Perimeter _createPerimeter(HttpServletRequest request, HttpServletResponse response,/*@ApiParam(value = "Perimeter to be created"  )*/  @Valid @RequestBody Perimeter perimeter)  throws Exception {
        return createPerimeter(request, response ,perimeter);
    }

    // Override this method
    /**
    * <p>Create a new perimeter</p>
    * <p>Create a new perimeter.</p>
    * @param perimeter Perimeter to be created
    * @return !AUTOGENERATED!
    * @throws Exception !AUTOGENERATED!
    **/
    Perimeter createPerimeter(HttpServletRequest request, HttpServletResponse response,Perimeter perimeter) throws Exception;


    /**
     * <p>Remove perimeter</p>
     * <p>Remove a perimeter</p>
     * @param id Perimeter id
     * @return !AUTOGENERATED!
     * @throws Exception !AUTOGENERATED!
     **/
 /*   @ApiOperation(value = "Remove perimeter", nickname = "deletePerimeter", notes = "Remove a perimeter", tags={ "perimeters", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Deleted"),
        @ApiResponse(code = 400, message = "Bad request"),
        @ApiResponse(code = 401, message = "Authentication required"),
        @ApiResponse(code = 403, message = "Forbidden - ADMIN role necessary"),
        @ApiResponse(code = 404, message = "Required perimeter not found") })
    */
    ///{id}
    @RequestMapping(value = "/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    //
    default Void _deletePerimeter(HttpServletRequest request, HttpServletResponse response,/*@ApiParam(value = "Perimeter id",required=true)*/ @PathVariable("id") String id)  throws Exception {
        return deletePerimeter(request, response ,id);
    }

    // Override this method
    /**
    * <p>Remove perimeter</p>
    * <p>Remove a perimeter</p>
    * @param id Perimeter id
    * @return !AUTOGENERATED!
    * @throws Exception !AUTOGENERATED!
    **/
    Void deletePerimeter(HttpServletRequest request, HttpServletResponse response,String id) throws Exception;


    /**
     * <p>Remove group from perimeter</p>
     * <p>ONLY remove group from perimeter (no addition).</p>
     * @param idPerimeter Perimeter id
     * @param idGroup Group id
     * @return !AUTOGENERATED!
     * @throws Exception !AUTOGENERATED!
     **/
 /*   @ApiOperation(value = "Remove group from perimeter", nickname = "deletePerimeterGroup", notes = "ONLY remove group from perimeter (no addition).", tags={ "perimeters","groups", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Deleted"),
        @ApiResponse(code = 400, message = "Bad request"),
        @ApiResponse(code = 401, message = "Authentication required"),
        @ApiResponse(code = 403, message = "Forbidden - ADMIN role necessary"),
        @ApiResponse(code = 404, message = "Required perimeter not found") })
    */
    ///{idPerimeter}/groups/{idGroup}
    @RequestMapping(value = "/{idPerimeter}/groups/{idGroup}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    //
    default Void _deletePerimeterGroup(HttpServletRequest request, HttpServletResponse response,/*@ApiParam(value = "Perimeter id",required=true)*/ @PathVariable("idPerimeter") String idPerimeter,/*@ApiParam(value = "Group id",required=true)*/ @PathVariable("idGroup") String idGroup)  throws Exception {
        return deletePerimeterGroup(request, response ,idPerimeter,idGroup);
    }

    // Override this method
    /**
    * <p>Remove group from perimeter</p>
    * <p>ONLY remove group from perimeter (no addition).</p>
    * @param idPerimeter Perimeter id
* @param idGroup Group id
    * @return !AUTOGENERATED!
    * @throws Exception !AUTOGENERATED!
    **/
    Void deletePerimeterGroup(HttpServletRequest request, HttpServletResponse response,String idPerimeter,String idGroup) throws Exception;


    /**
     * <p>Remove all groups from perimeter</p>
     * <p>remove all groups from perimeter.</p>
     * @param id Perimeter id
     * @return !AUTOGENERATED!
     * @throws Exception !AUTOGENERATED!
     **/
 /*   @ApiOperation(value = "Remove all groups from perimeter", nickname = "deletePerimeterGroups", notes = "remove all groups from perimeter.", tags={ "perimeters","groups", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Deleted"),
        @ApiResponse(code = 400, message = "Bad request"),
        @ApiResponse(code = 401, message = "Authentication required"),
        @ApiResponse(code = 403, message = "Forbidden - ADMIN role necessary"),
        @ApiResponse(code = 404, message = "Required perimeter not found") })
    */
    ///{id}/groups
    @RequestMapping(value = "/{id}/groups",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    //
    default Void _deletePerimeterGroups(HttpServletRequest request, HttpServletResponse response,/*@ApiParam(value = "Perimeter id",required=true)*/ @PathVariable("id") String id)  throws Exception {
        return deletePerimeterGroups(request, response ,id);
    }

    // Override this method
    /**
    * <p>Remove all groups from perimeter</p>
    * <p>remove all groups from perimeter.</p>
    * @param id Perimeter id
    * @return !AUTOGENERATED!
    * @throws Exception !AUTOGENERATED!
    **/
    Void deletePerimeterGroups(HttpServletRequest request, HttpServletResponse response,String id) throws Exception;


    /**
     * <p>Fetch an existing perimeter</p>
     * <p>Fetch an existing perimeter.</p>
     * @param id Perimeter id
     * @return !AUTOGENERATED!
     * @throws Exception !AUTOGENERATED!
     **/
 /*   @ApiOperation(value = "Fetch an existing perimeter", nickname = "fetchPerimeter", notes = "Fetch an existing perimeter.", response = Perimeter.class, tags={ "perimeters", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Perimeter.class),
        @ApiResponse(code = 401, message = "Authentication required"),
        @ApiResponse(code = 403, message = "Forbidden - ADMIN role necessary"),
        @ApiResponse(code = 404, message = "Required perimeter not found") })
    */
    ///{id}
    @RequestMapping(value = "/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    //
    default Perimeter _fetchPerimeter(HttpServletRequest request, HttpServletResponse response,/*@ApiParam(value = "Perimeter id",required=true)*/ @PathVariable("id") String id)  throws Exception {
        return fetchPerimeter(request, response ,id);
    }

    // Override this method
    /**
    * <p>Fetch an existing perimeter</p>
    * <p>Fetch an existing perimeter.</p>
    * @param id Perimeter id
    * @return !AUTOGENERATED!
    * @throws Exception !AUTOGENERATED!
    **/
    Perimeter fetchPerimeter(HttpServletRequest request, HttpServletResponse response,String id) throws Exception;


    /**
     * <p>Fetch a list of all existing perimeters</p>
     * <p>Fetch a list of all existing perimeters.</p>
     * @return !AUTOGENERATED!
     * @throws Exception !AUTOGENERATED!
     **/
 /*   @ApiOperation(value = "Fetch a list of all existing perimeters", nickname = "fetchPerimeters", notes = "Fetch a list of all existing perimeters.", response = Perimeter.class, responseContainer = "List", tags={ "perimeters", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Perimeter.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Authentication required"),
        @ApiResponse(code = 403, message = "Forbidden - ADMIN role necessary") })
    */
    //
    @RequestMapping(
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    //
    default List<Perimeter> _fetchPerimeters(HttpServletRequest request, HttpServletResponse response)  throws Exception {
        return fetchPerimeters(request, response );
    }

    // Override this method
    /**
    * <p>Fetch a list of all existing perimeters</p>
    * <p>Fetch a list of all existing perimeters.</p>
        * @return !AUTOGENERATED!
    * @throws Exception !AUTOGENERATED!
    **/
    List<Perimeter> fetchPerimeters(HttpServletRequest request, HttpServletResponse response) throws Exception;


    /**
     * <p>Update existing perimeter</p>
     * <p>Update existing perimeter.</p>
     * @param id Id of perimeter to be updated (should match id in request body)
     * @param perimeter Updated perimeter data (should match id path parameter)
     * @return !AUTOGENERATED!
     * @throws Exception !AUTOGENERATED!
     **/
 /*   @ApiOperation(value = "Update existing perimeter", nickname = "updatePerimeter", notes = "Update existing perimeter.", response = Perimeter.class, tags={ "perimeters", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Updated", response = Perimeter.class),
        @ApiResponse(code = 201, message = "Created", response = Perimeter.class),
        @ApiResponse(code = 400, message = "Bad request (body doesn't match id path parameter)"),
        @ApiResponse(code = 401, message = "Authentication required"),
        @ApiResponse(code = 403, message = "Forbidden - ADMIN role necessary") })
    */
    ///{id}
    @RequestMapping(value = "/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    //
    default Perimeter _updatePerimeter(HttpServletRequest request, HttpServletResponse response,/*@ApiParam(value = "Id of perimeter to be updated (should match id in request body)",required=true)*/ @PathVariable("id") String id,/*@ApiParam(value = "Updated perimeter data (should match id path parameter)"  )*/  @Valid @RequestBody Perimeter perimeter)  throws Exception {
        return updatePerimeter(request, response ,id,perimeter);
    }

    // Override this method
    /**
    * <p>Update existing perimeter</p>
    * <p>Update existing perimeter.</p>
    * @param id Id of perimeter to be updated (should match id in request body)
* @param perimeter Updated perimeter data (should match id path parameter)
    * @return !AUTOGENERATED!
    * @throws Exception !AUTOGENERATED!
    **/
    Perimeter updatePerimeter(HttpServletRequest request, HttpServletResponse response,String id,Perimeter perimeter) throws Exception;


    /**
     * <p>Update list of groups that have this perimeter</p>
     * <p>Update list of groups that have this perimeter, groups not included in given list lose this perimeter.</p>
     * @param id Perimeter id
     * @param groups Array of group id representing exactly the intended list of groups that must have this perimeter after update
     * @return !AUTOGENERATED!
     * @throws Exception !AUTOGENERATED!
     **/
 /*   @ApiOperation(value = "Update list of groups that have this perimeter", nickname = "updatePerimeterGroups", notes = "Update list of groups that have this perimeter, groups not included in given list lose this perimeter.", tags={ "perimeters","groups", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Updated"),
        @ApiResponse(code = 400, message = "Bad request"),
        @ApiResponse(code = 401, message = "Authentication required"),
        @ApiResponse(code = 403, message = "Forbidden - ADMIN role necessary"),
        @ApiResponse(code = 404, message = "Required perimeter not found") })
    */
    ///{id}/groups
    @RequestMapping(value = "/{id}/groups",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    //
    default Void _updatePerimeterGroups(HttpServletRequest request, HttpServletResponse response,/*@ApiParam(value = "Perimeter id",required=true)*/ @PathVariable("id") String id,/*@ApiParam(value = "Array of group id representing exactly the intended list of groups that must have this perimeter after update"  )*/  @Valid @RequestBody List<String> groups)  throws Exception {
        return updatePerimeterGroups(request, response ,id,groups);
    }

    // Override this method
    /**
    * <p>Update list of groups that have this perimeter</p>
    * <p>Update list of groups that have this perimeter, groups not included in given list lose this perimeter.</p>
    * @param id Perimeter id
* @param groups Array of group id representing exactly the intended list of groups that must have this perimeter after update
    * @return !AUTOGENERATED!
    * @throws Exception !AUTOGENERATED!
    **/
    Void updatePerimeterGroups(HttpServletRequest request, HttpServletResponse response,String id,List<String> groups) throws Exception;

}
