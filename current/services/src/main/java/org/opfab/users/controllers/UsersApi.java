/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.20).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.opfab.users.controllers;

import org.opfab.users.model.Perimeter;
import org.opfab.users.model.User;
import org.opfab.users.model.UserSettings;
import com.fasterxml.jackson.databind.ObjectMapper;
//import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
//import org.springframework.security.access.prepost.PreAuthorize;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Optional;

/**
 * the users API
 *
 * @author SWAGGER
 **/

//@Api(value = "users", description = "the users API")
@RequestMapping("/users")
public interface UsersApi {

    /**
     * <p>Create a new user</p>
     * <p>Create a new user. If the user already exists, then an update of the user will be made. Be careful, user login must be lowercase. Otherwise, it will be converted to lowercase before saving to the database.</p>
     * @param user User to be created
     * @return !AUTOGENERATED!
     * @throws Exception !AUTOGENERATED!
     **/
 /*   @ApiOperation(value = "Create a new user", nickname = "createUser", notes = "Create a new user. If the user already exists, then an update of the user will be made. Be careful, user login must be lowercase. Otherwise, it will be converted to lowercase before saving to the database.", response = User.class, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK (user already existed so it was updated)", response = User.class),
        @ApiResponse(code = 201, message = "Created", response = User.class),
        @ApiResponse(code = 400, message = "Bad request"),
        @ApiResponse(code = 401, message = "Authentication required"),
        @ApiResponse(code = 403, message = "Authenticated users who are not admins can only create their own data") })
    */
    //
    @RequestMapping(
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    //
    default User _createUser(HttpServletRequest request, HttpServletResponse response,/*@ApiParam(value = "User to be created"  )*/  @Valid @RequestBody User user)  throws Exception {
        return createUser(request, response ,user);
    }

    // Override this method
    /**
    * <p>Create a new user</p>
    * <p>Create a new user. If the user already exists, then an update of the user will be made. Be careful, user login must be lowercase. Otherwise, it will be converted to lowercase before saving to the database.</p>
    * @param user User to be created
    * @return !AUTOGENERATED!
    * @throws Exception !AUTOGENERATED!
    **/
    User createUser(HttpServletRequest request, HttpServletResponse response,User user) throws Exception;


    /**
     * <p>Remove user</p>
     * <p>Remove a user</p>
     * @param login User login
     * @return !AUTOGENERATED!
     * @throws Exception !AUTOGENERATED!
     **/
 /*   @ApiOperation(value = "Remove user", nickname = "deleteUser", notes = "Remove a user", tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Deleted"),
        @ApiResponse(code = 400, message = "Bad request"),
        @ApiResponse(code = 401, message = "Authentication required"),
        @ApiResponse(code = 403, message = "Forbidden - ADMIN role necessary"),
        @ApiResponse(code = 404, message = "Required user not found") })
    */
    ///{login}
    @RequestMapping(value = "/{login}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    //
    default Void _deleteUser(HttpServletRequest request, HttpServletResponse response,/*@ApiParam(value = "User login",required=true)*/ @PathVariable("login") String login)  throws Exception {
        return deleteUser(request, response ,login);
    }

    // Override this method
    /**
    * <p>Remove user</p>
    * <p>Remove a user</p>
    * @param login User login
    * @return !AUTOGENERATED!
    * @throws Exception !AUTOGENERATED!
    **/
    Void deleteUser(HttpServletRequest request, HttpServletResponse response,String login) throws Exception;


    /**
     * <p>Fetch an existing user</p>
     * <p>Fetch an existing user from their login</p>
     * @param login user login
     * @return !AUTOGENERATED!
     * @throws Exception !AUTOGENERATED!
     **/
 /*   @ApiOperation(value = "Fetch an existing user", nickname = "fetchUser", notes = "Fetch an existing user from their login", response = User.class, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = User.class),
        @ApiResponse(code = 401, message = "Authentication required"),
        @ApiResponse(code = 403, message = "Authenticated users who are not admins can only access their own data"),
        @ApiResponse(code = 404, message = "Required user not found") })
    */
    ///{login}
    @RequestMapping(value = "/{login}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    //
    default User _fetchUser(HttpServletRequest request, HttpServletResponse response,/*@ApiParam(value = "user login",required=true)*/ @PathVariable("login") String login)  throws Exception {
        return fetchUser(request, response ,login);
    }

    // Override this method
    /**
    * <p>Fetch an existing user</p>
    * <p>Fetch an existing user from their login</p>
    * @param login user login
    * @return !AUTOGENERATED!
    * @throws Exception !AUTOGENERATED!
    **/
    User fetchUser(HttpServletRequest request, HttpServletResponse response,String login) throws Exception;


    /**
     * <p>Fetch an existing user's perimeters</p>
     * <p>Fetch existing user's perimeters from their login.</p>
     * @param login user login
     * @return !AUTOGENERATED!
     * @throws Exception !AUTOGENERATED!
     **/
 /*   @ApiOperation(value = "Fetch an existing user's perimeters", nickname = "fetchUserPerimeters", notes = "Fetch existing user's perimeters from their login.", response = Perimeter.class, responseContainer = "List", tags={ "users","perimeters", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Perimeter.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Authentication required"),
        @ApiResponse(code = 403, message = "Authenticated users who are not admins can only access their own data"),
        @ApiResponse(code = 404, message = "Required user not found") })
    */
    ///{login}/perimeters
    @RequestMapping(value = "/{login}/perimeters",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    //
    default List<Perimeter> _fetchUserPerimeters(HttpServletRequest request, HttpServletResponse response,/*@ApiParam(value = "user login",required=true)*/ @PathVariable("login") String login)  throws Exception {
        return fetchUserPerimeters(request, response ,login);
    }

    // Override this method
    /**
    * <p>Fetch an existing user's perimeters</p>
    * <p>Fetch existing user's perimeters from their login.</p>
    * @param login user login
    * @return !AUTOGENERATED!
    * @throws Exception !AUTOGENERATED!
    **/
    List<Perimeter> fetchUserPerimeters(HttpServletRequest request, HttpServletResponse response,String login) throws Exception;


    /**
     * <p>Fetch an existing user's settings</p>
     * <p>Fetch existing user's settings from their login</p>
     * @param login user login
     * @return !AUTOGENERATED!
     * @throws Exception !AUTOGENERATED!
     **/
 /*   @ApiOperation(value = "Fetch an existing user's settings", nickname = "fetchUserSetting", notes = "Fetch existing user's settings from their login", response = UserSettings.class, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = UserSettings.class),
        @ApiResponse(code = 401, message = "Authentication required"),
        @ApiResponse(code = 403, message = "Authenticated users who are not admins can only access their own data"),
        @ApiResponse(code = 404, message = "Required user not found") })
    */
    ///{login}/settings
    @RequestMapping(value = "/{login}/settings",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    //
    default UserSettings _fetchUserSetting(HttpServletRequest request, HttpServletResponse response,/*@ApiParam(value = "user login",required=true)*/ @PathVariable("login") String login)  throws Exception {
        return fetchUserSetting(request, response ,login);
    }

    // Override this method
    /**
    * <p>Fetch an existing user's settings</p>
    * <p>Fetch existing user's settings from their login</p>
    * @param login user login
    * @return !AUTOGENERATED!
    * @throws Exception !AUTOGENERATED!
    **/
    UserSettings fetchUserSetting(HttpServletRequest request, HttpServletResponse response,String login) throws Exception;


    /**
     * <p>Fetch a list of all existing users</p>
     * <p>Fetch a list of all existing users, with pagination and filter options</p>
     * @return !AUTOGENERATED!
     * @throws Exception !AUTOGENERATED!
     **/
 /*   @ApiOperation(value = "Fetch a list of all existing users", nickname = "fetchUsers", notes = "Fetch a list of all existing users, with pagination and filter options", response = User.class, responseContainer = "List", tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = User.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Authentication required"),
        @ApiResponse(code = 403, message = "Authenticated users who are not admins can only access their own data") })
    */
    //
    @RequestMapping(
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    //
    default List<User> _fetchUsers(HttpServletRequest request, HttpServletResponse response)  throws Exception {
        return fetchUsers(request, response );
    }

    // Override this method
    /**
    * <p>Fetch a list of all existing users</p>
    * <p>Fetch a list of all existing users, with pagination and filter options</p>
        * @return !AUTOGENERATED!
    * @throws Exception !AUTOGENERATED!
    **/
    List<User> fetchUsers(HttpServletRequest request, HttpServletResponse response) throws Exception;


    /**
     * <p>Patch existing user settings</p>
     * <p>Patch existing user settions</p>
     * @param login user login
     * @param userSettings User settings to be updated
     * @return !AUTOGENERATED!
     * @throws Exception !AUTOGENERATED!
     **/
 /*   @ApiOperation(value = "Patch existing user settings", nickname = "patchUserSettings", notes = "Patch existing user settions", response = UserSettings.class, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = UserSettings.class),
        @ApiResponse(code = 401, message = "Authentication required"),
        @ApiResponse(code = 403, message = "Authenticated users who are not admins can only update their own data"),
        @ApiResponse(code = 404, message = "User not found") })
    */
    ///{login}/settings
    @RequestMapping(value = "/{login}/settings",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PATCH)
    //
    default UserSettings _patchUserSettings(HttpServletRequest request, HttpServletResponse response,/*@ApiParam(value = "user login",required=true)*/ @PathVariable("login") String login,/*@ApiParam(value = "User settings to be updated"  )*/  @Valid @RequestBody UserSettings userSettings)  throws Exception {
        return patchUserSettings(request, response ,login,userSettings);
    }

    // Override this method
    /**
    * <p>Patch existing user settings</p>
    * <p>Patch existing user settions</p>
    * @param login user login
* @param userSettings User settings to be updated
    * @return !AUTOGENERATED!
    * @throws Exception !AUTOGENERATED!
    **/
    UserSettings patchUserSettings(HttpServletRequest request, HttpServletResponse response,String login,UserSettings userSettings) throws Exception;


    /**
     * <p>Update existing user</p>
     * <p>Update existing user</p>
     * @param login user login (should match login in request body)
     * @param user User to be updated (login should match path parameter)
     * @return !AUTOGENERATED!
     * @throws Exception !AUTOGENERATED!
     **/
 /*   @ApiOperation(value = "Update existing user", nickname = "updateUser", notes = "Update existing user", response = User.class, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = User.class),
        @ApiResponse(code = 201, message = "Created", response = User.class),
        @ApiResponse(code = 400, message = "Bad request (body doesn't match login path parameter)"),
        @ApiResponse(code = 401, message = "Authentication required"),
        @ApiResponse(code = 403, message = "Authenticated users who are not admins can only update their own data") })
    */
    ///{login}
    @RequestMapping(value = "/{login}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    //
    default User _updateUser(HttpServletRequest request, HttpServletResponse response,/*@ApiParam(value = "user login (should match login in request body)",required=true)*/ @PathVariable("login") String login,/*@ApiParam(value = "User to be updated (login should match path parameter)"  )*/  @Valid @RequestBody User user)  throws Exception {
        return updateUser(request, response ,login,user);
    }

    // Override this method
    /**
    * <p>Update existing user</p>
    * <p>Update existing user</p>
    * @param login user login (should match login in request body)
* @param user User to be updated (login should match path parameter)
    * @return !AUTOGENERATED!
    * @throws Exception !AUTOGENERATED!
    **/
    User updateUser(HttpServletRequest request, HttpServletResponse response,String login,User user) throws Exception;


    /**
     * <p>Update existing user settings</p>
     * <p>Update existing user settiogs</p>
     * @param login user login (should match login in request body)
     * @param userSettings User settings to be updated (login should match path parameter)
     * @return !AUTOGENERATED!
     * @throws Exception !AUTOGENERATED!
     **/
 /*   @ApiOperation(value = "Update existing user settings", nickname = "updateUserSettings", notes = "Update existing user settiogs", response = UserSettings.class, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = UserSettings.class),
        @ApiResponse(code = 201, message = "Created", response = UserSettings.class),
        @ApiResponse(code = 400, message = "Bad request (body doesn't match login path parameter)"),
        @ApiResponse(code = 401, message = "Authentication required"),
        @ApiResponse(code = 403, message = "Authenticated users who are not admins can only update their own data"),
        @ApiResponse(code = 404, message = "User not found") })
    */
    ///{login}/settings
    @RequestMapping(value = "/{login}/settings",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    //
    default UserSettings _updateUserSettings(HttpServletRequest request, HttpServletResponse response,/*@ApiParam(value = "user login (should match login in request body)",required=true)*/ @PathVariable("login") String login,/*@ApiParam(value = "User settings to be updated (login should match path parameter)"  )*/  @Valid @RequestBody UserSettings userSettings)  throws Exception {
        return updateUserSettings(request, response ,login,userSettings);
    }

    // Override this method
    /**
    * <p>Update existing user settings</p>
    * <p>Update existing user settiogs</p>
    * @param login user login (should match login in request body)
* @param userSettings User settings to be updated (login should match path parameter)
    * @return !AUTOGENERATED!
    * @throws Exception !AUTOGENERATED!
    **/
    UserSettings updateUserSettings(HttpServletRequest request, HttpServletResponse response,String login,UserSettings userSettings) throws Exception;

}
