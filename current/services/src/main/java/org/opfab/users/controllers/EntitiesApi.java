/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.20).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.opfab.users.controllers;

import org.opfab.users.model.Entity;
import java.util.List;
import com.fasterxml.jackson.databind.ObjectMapper;
//import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
//import org.springframework.security.access.prepost.PreAuthorize;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Optional;

/**
 * the entities API
 *
 * @author SWAGGER
 **/

//@Api(value = "entities", description = "the entities API")
@RequestMapping("/entities")
public interface EntitiesApi {

    /**
     * <p>Add users to entity</p>
     * <p>ONLY add users to entity (no deletion).</p>
     * @param id Entity id
     * @param users Array of user logins to be added to entity
     * @return !AUTOGENERATED!
     * @throws Exception !AUTOGENERATED!
     **/
 /*   @ApiOperation(value = "Add users to entity", nickname = "addEntityUsers", notes = "ONLY add users to entity (no deletion).", tags={ "entities","users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Updated"),
        @ApiResponse(code = 400, message = "Bad request"),
        @ApiResponse(code = 401, message = "Authentication required"),
        @ApiResponse(code = 403, message = "Forbidden - ADMIN role necessary"),
        @ApiResponse(code = 404, message = "Required entity not found") })
    */
    ///{id}/users
    @RequestMapping(value = "/{id}/users",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PATCH)
    //
    default Void _addEntityUsers(HttpServletRequest request, HttpServletResponse response,/*@ApiParam(value = "Entity id",required=true)*/ @PathVariable("id") String id,/*@ApiParam(value = "Array of user logins to be added to entity"  )*/  @Valid @RequestBody List<String> users)  throws Exception {
        return addEntityUsers(request, response ,id,users);
    }

    // Override this method
    /**
    * <p>Add users to entity</p>
    * <p>ONLY add users to entity (no deletion).</p>
    * @param id Entity id
* @param users Array of user logins to be added to entity
    * @return !AUTOGENERATED!
    * @throws Exception !AUTOGENERATED!
    **/
    Void addEntityUsers(HttpServletRequest request, HttpServletResponse response,String id,List<String> users) throws Exception;


    /**
     * <p>Create a new entity of users</p>
     * <p>Create a new entity of users.</p>
     * @param entity Entity to be created
     * @return !AUTOGENERATED!
     * @throws Exception !AUTOGENERATED!
     **/
 /*   @ApiOperation(value = "Create a new entity of users", nickname = "createEntity", notes = "Create a new entity of users.", response = Entity.class, tags={ "entities", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Updated", response = Entity.class),
        @ApiResponse(code = 201, message = "Created", response = Entity.class),
        @ApiResponse(code = 400, message = "Bad request (duplicate key)"),
        @ApiResponse(code = 401, message = "Authentication required"),
        @ApiResponse(code = 403, message = "Forbidden - ADMIN role necessary") })
    */
    //
    @RequestMapping(
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    //
    default Entity _createEntity(HttpServletRequest request, HttpServletResponse response,/*@ApiParam(value = "Entity to be created"  )*/  @Valid @RequestBody Entity entity)  throws Exception {
        return createEntity(request, response ,entity);
    }

    // Override this method
    /**
    * <p>Create a new entity of users</p>
    * <p>Create a new entity of users.</p>
    * @param entity Entity to be created
    * @return !AUTOGENERATED!
    * @throws Exception !AUTOGENERATED!
    **/
    Entity createEntity(HttpServletRequest request, HttpServletResponse response,Entity entity) throws Exception;


    /**
     * <p>Remove entity</p>
     * <p>Remove an entity</p>
     * @param id Entity id
     * @return !AUTOGENERATED!
     * @throws Exception !AUTOGENERATED!
     **/
 /*   @ApiOperation(value = "Remove entity", nickname = "deleteEntity", notes = "Remove an entity", tags={ "entities", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Deleted"),
        @ApiResponse(code = 400, message = "Bad request"),
        @ApiResponse(code = 401, message = "Authentication required"),
        @ApiResponse(code = 403, message = "Forbidden - ADMIN role necessary"),
        @ApiResponse(code = 404, message = "Required entity not found") })
    */
    ///{id}
    @RequestMapping(value = "/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    //
    default Void _deleteEntity(HttpServletRequest request, HttpServletResponse response,/*@ApiParam(value = "Entity id",required=true)*/ @PathVariable("id") String id)  throws Exception {
        return deleteEntity(request, response ,id);
    }

    // Override this method
    /**
    * <p>Remove entity</p>
    * <p>Remove an entity</p>
    * @param id Entity id
    * @return !AUTOGENERATED!
    * @throws Exception !AUTOGENERATED!
    **/
    Void deleteEntity(HttpServletRequest request, HttpServletResponse response,String id) throws Exception;


    /**
     * <p>Remove user from entity</p>
     * <p>ONLY remove user from entity (no addition).</p>
     * @param id Entity id
     * @param login User login
     * @return !AUTOGENERATED!
     * @throws Exception !AUTOGENERATED!
     **/
 /*   @ApiOperation(value = "Remove user from entity", nickname = "deleteEntityUser", notes = "ONLY remove user from entity (no addition).", tags={ "entities","users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Deleted"),
        @ApiResponse(code = 400, message = "Bad request"),
        @ApiResponse(code = 401, message = "Authentication required"),
        @ApiResponse(code = 403, message = "Forbidden - ADMIN role necessary"),
        @ApiResponse(code = 404, message = "Required entity not found") })
    */
    ///{id}/users/{login}
    @RequestMapping(value = "/{id}/users/{login}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    //
    default Void _deleteEntityUser(HttpServletRequest request, HttpServletResponse response,/*@ApiParam(value = "Entity id",required=true)*/ @PathVariable("id") String id,/*@ApiParam(value = "User login",required=true)*/ @PathVariable("login") String login)  throws Exception {
        return deleteEntityUser(request, response ,id,login);
    }

    // Override this method
    /**
    * <p>Remove user from entity</p>
    * <p>ONLY remove user from entity (no addition).</p>
    * @param id Entity id
* @param login User login
    * @return !AUTOGENERATED!
    * @throws Exception !AUTOGENERATED!
    **/
    Void deleteEntityUser(HttpServletRequest request, HttpServletResponse response,String id,String login) throws Exception;


    /**
     * <p>Remove all users from entity</p>
     * <p>remove all users from entity.</p>
     * @param id Entity id
     * @return !AUTOGENERATED!
     * @throws Exception !AUTOGENERATED!
     **/
 /*   @ApiOperation(value = "Remove all users from entity", nickname = "deleteEntityUsers", notes = "remove all users from entity.", tags={ "entities","users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Deleted"),
        @ApiResponse(code = 400, message = "Bad request"),
        @ApiResponse(code = 401, message = "Authentication required"),
        @ApiResponse(code = 403, message = "Forbidden - ADMIN role necessary"),
        @ApiResponse(code = 404, message = "Required entity not found") })
    */
    ///{id}/users
    @RequestMapping(value = "/{id}/users",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    //
    default Void _deleteEntityUsers(HttpServletRequest request, HttpServletResponse response,/*@ApiParam(value = "Entity id",required=true)*/ @PathVariable("id") String id)  throws Exception {
        return deleteEntityUsers(request, response ,id);
    }

    // Override this method
    /**
    * <p>Remove all users from entity</p>
    * <p>remove all users from entity.</p>
    * @param id Entity id
    * @return !AUTOGENERATED!
    * @throws Exception !AUTOGENERATED!
    **/
    Void deleteEntityUsers(HttpServletRequest request, HttpServletResponse response,String id) throws Exception;


    /**
     * <p>Fetch a list of all existing entities.</p>
     * <p>Fetch a list of all existing entities, with pagination and filter options.</p>
     * @return !AUTOGENERATED!
     * @throws Exception !AUTOGENERATED!
     **/
 /*   @ApiOperation(value = "Fetch a list of all existing entities.", nickname = "fetchEntities", notes = "Fetch a list of all existing entities, with pagination and filter options.", response = Entity.class, responseContainer = "List", tags={ "entities", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Entity.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Authentication required") })
    */
    //
    @RequestMapping(
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    //
    default List<Entity> _fetchEntities(HttpServletRequest request, HttpServletResponse response)  throws Exception {
        return fetchEntities(request, response );
    }

    // Override this method
    /**
    * <p>Fetch a list of all existing entities.</p>
    * <p>Fetch a list of all existing entities, with pagination and filter options.</p>
        * @return !AUTOGENERATED!
    * @throws Exception !AUTOGENERATED!
    **/
    List<Entity> fetchEntities(HttpServletRequest request, HttpServletResponse response) throws Exception;


    /**
     * <p>Fetch an existing entity of users</p>
     * <p>Fetch an existing entity of users.</p>
     * @param id Entity id
     * @return !AUTOGENERATED!
     * @throws Exception !AUTOGENERATED!
     **/
 /*   @ApiOperation(value = "Fetch an existing entity of users", nickname = "fetchEntity", notes = "Fetch an existing entity of users.", response = Entity.class, tags={ "entities", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Entity.class),
        @ApiResponse(code = 401, message = "Authentication required"),
        @ApiResponse(code = 403, message = "Forbidden - ADMIN role necessary"),
        @ApiResponse(code = 404, message = "Required entity not found") })
    */
    ///{id}
    @RequestMapping(value = "/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    //
    default Entity _fetchEntity(HttpServletRequest request, HttpServletResponse response,/*@ApiParam(value = "Entity id",required=true)*/ @PathVariable("id") String id)  throws Exception {
        return fetchEntity(request, response ,id);
    }

    // Override this method
    /**
    * <p>Fetch an existing entity of users</p>
    * <p>Fetch an existing entity of users.</p>
    * @param id Entity id
    * @return !AUTOGENERATED!
    * @throws Exception !AUTOGENERATED!
    **/
    Entity fetchEntity(HttpServletRequest request, HttpServletResponse response,String id) throws Exception;


    /**
     * <p>Update existing entity</p>
     * <p>Update existing entity.</p>
     * @param id Id of entity to be updated (should match id in request body)
     * @param entity Updated entity data (should match id path parameter)
     * @return !AUTOGENERATED!
     * @throws Exception !AUTOGENERATED!
     **/
 /*   @ApiOperation(value = "Update existing entity", nickname = "updateEntity", notes = "Update existing entity.", response = Entity.class, tags={ "entities", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Updated", response = Entity.class),
        @ApiResponse(code = 201, message = "Created", response = Entity.class),
        @ApiResponse(code = 400, message = "Bad request (body doesn't match id path parameter)"),
        @ApiResponse(code = 401, message = "Authentication required"),
        @ApiResponse(code = 403, message = "Forbidden - ADMIN role necessary") })
    */
    ///{id}
    @RequestMapping(value = "/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    //
    default Entity _updateEntity(HttpServletRequest request, HttpServletResponse response,/*@ApiParam(value = "Id of entity to be updated (should match id in request body)",required=true)*/ @PathVariable("id") String id,/*@ApiParam(value = "Updated entity data (should match id path parameter)"  )*/  @Valid @RequestBody Entity entity)  throws Exception {
        return updateEntity(request, response ,id,entity);
    }

    // Override this method
    /**
    * <p>Update existing entity</p>
    * <p>Update existing entity.</p>
    * @param id Id of entity to be updated (should match id in request body)
* @param entity Updated entity data (should match id path parameter)
    * @return !AUTOGENERATED!
    * @throws Exception !AUTOGENERATED!
    **/
    Entity updateEntity(HttpServletRequest request, HttpServletResponse response,String id,Entity entity) throws Exception;


    /**
     * <p>Update list of entity users</p>
     * <p>Update list of entity users, users not included in given list are removed from entity.</p>
     * @param id Entity id
     * @param users Array of user logins representing exactly the intended list of entity users after update
     * @return !AUTOGENERATED!
     * @throws Exception !AUTOGENERATED!
     **/
 /*   @ApiOperation(value = "Update list of entity users", nickname = "updateEntityUsers", notes = "Update list of entity users, users not included in given list are removed from entity.", tags={ "entities","users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Updated"),
        @ApiResponse(code = 400, message = "Bad request"),
        @ApiResponse(code = 401, message = "Authentication required"),
        @ApiResponse(code = 403, message = "Forbidden - ADMIN role necessary"),
        @ApiResponse(code = 404, message = "Required entity not found") })
    */
    ///{id}/users
    @RequestMapping(value = "/{id}/users",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    //
    default Void _updateEntityUsers(HttpServletRequest request, HttpServletResponse response,/*@ApiParam(value = "Entity id",required=true)*/ @PathVariable("id") String id,/*@ApiParam(value = "Array of user logins representing exactly the intended list of entity users after update"  )*/  @Valid @RequestBody List<String> users)  throws Exception {
        return updateEntityUsers(request, response ,id,users);
    }

    // Override this method
    /**
    * <p>Update list of entity users</p>
    * <p>Update list of entity users, users not included in given list are removed from entity.</p>
    * @param id Entity id
* @param users Array of user logins representing exactly the intended list of entity users after update
    * @return !AUTOGENERATED!
    * @throws Exception !AUTOGENERATED!
    **/
    Void updateEntityUsers(HttpServletRequest request, HttpServletResponse response,String id,List<String> users) throws Exception;

}
